// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v5.29.3
// source: movie.proto

package pb

import (
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Movie Request Message
type MovieRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description   string                 `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Rating        float64                `protobuf:"fixed64,3,opt,name=rating,proto3" json:"rating,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MovieRequest) Reset() {
	*x = MovieRequest{}
	mi := &file_movie_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MovieRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MovieRequest) ProtoMessage() {}

func (x *MovieRequest) ProtoReflect() protoreflect.Message {
	mi := &file_movie_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MovieRequest.ProtoReflect.Descriptor instead.
func (*MovieRequest) Descriptor() ([]byte, []int) {
	return file_movie_proto_rawDescGZIP(), []int{0}
}

func (x *MovieRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MovieRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *MovieRequest) GetRating() float64 {
	if x != nil {
		return x.Rating
	}
	return 0
}

// Movie Response Message
type MovieResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Movie         *Movie                 `protobuf:"bytes,1,opt,name=movie,proto3" json:"movie,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MovieResponse) Reset() {
	*x = MovieResponse{}
	mi := &file_movie_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MovieResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MovieResponse) ProtoMessage() {}

func (x *MovieResponse) ProtoReflect() protoreflect.Message {
	mi := &file_movie_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MovieResponse.ProtoReflect.Descriptor instead.
func (*MovieResponse) Descriptor() ([]byte, []int) {
	return file_movie_proto_rawDescGZIP(), []int{1}
}

func (x *MovieResponse) GetMovie() *Movie {
	if x != nil {
		return x.Movie
	}
	return nil
}

// Movie Entity
type Movie struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description   string                 `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Rating        float64                `protobuf:"fixed64,4,opt,name=rating,proto3" json:"rating,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Movie) Reset() {
	*x = Movie{}
	mi := &file_movie_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Movie) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Movie) ProtoMessage() {}

func (x *Movie) ProtoReflect() protoreflect.Message {
	mi := &file_movie_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Movie.ProtoReflect.Descriptor instead.
func (*Movie) Descriptor() ([]byte, []int) {
	return file_movie_proto_rawDescGZIP(), []int{2}
}

func (x *Movie) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Movie) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Movie) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Movie) GetRating() float64 {
	if x != nil {
		return x.Rating
	}
	return 0
}

// Get All Movies Request (Empty for now)
type GetAllMoviesRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetAllMoviesRequest) Reset() {
	*x = GetAllMoviesRequest{}
	mi := &file_movie_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAllMoviesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllMoviesRequest) ProtoMessage() {}

func (x *GetAllMoviesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_movie_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllMoviesRequest.ProtoReflect.Descriptor instead.
func (*GetAllMoviesRequest) Descriptor() ([]byte, []int) {
	return file_movie_proto_rawDescGZIP(), []int{3}
}

// Get All Movies Response
type GetAllMoviesResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Movies        []*Movie               `protobuf:"bytes,1,rep,name=movies,proto3" json:"movies,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetAllMoviesResponse) Reset() {
	*x = GetAllMoviesResponse{}
	mi := &file_movie_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAllMoviesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllMoviesResponse) ProtoMessage() {}

func (x *GetAllMoviesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_movie_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllMoviesResponse.ProtoReflect.Descriptor instead.
func (*GetAllMoviesResponse) Descriptor() ([]byte, []int) {
	return file_movie_proto_rawDescGZIP(), []int{4}
}

func (x *GetAllMoviesResponse) GetMovies() []*Movie {
	if x != nil {
		return x.Movies
	}
	return nil
}

var File_movie_proto protoreflect.FileDescriptor

var file_movie_proto_rawDesc = string([]byte{
	0x0a, 0x0b, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x02, 0x70,
	0x62, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e,
	0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xb3, 0x02, 0x0a, 0x0c, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x49, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x35,
	0x92, 0x41, 0x32, 0x2a, 0x0a, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x20, 0x4e, 0x61, 0x6d, 0x65, 0x32,
	0x17, 0x54, 0x68, 0x65, 0x20, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x2e, 0x4a, 0x0b, 0x22, 0x49, 0x6e, 0x63, 0x65, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x82, 0x01, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x60, 0x92, 0x41, 0x5d, 0x2a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x32, 0x1d, 0x41, 0x20, 0x62, 0x72, 0x69, 0x65, 0x66, 0x20, 0x73, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6d, 0x6f, 0x76, 0x69,
	0x65, 0x2e, 0x4a, 0x2f, 0x22, 0x41, 0x20, 0x6d, 0x69, 0x6e, 0x64, 0x2d, 0x62, 0x65, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x72, 0x69, 0x6c, 0x6c, 0x65, 0x72, 0x20, 0x61, 0x62, 0x6f,
	0x75, 0x74, 0x20, 0x64, 0x72, 0x65, 0x61, 0x6d, 0x20, 0x69, 0x6e, 0x76, 0x61, 0x73, 0x69, 0x6f,
	0x6e, 0x2e, 0x22, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x53, 0x0a, 0x06, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01,
	0x42, 0x3b, 0x92, 0x41, 0x38, 0x2a, 0x06, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x32, 0x27, 0x54,
	0x68, 0x65, 0x20, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x20, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x20,
	0x6f, 0x6e, 0x20, 0x61, 0x20, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x31, 0x20,
	0x74, 0x6f, 0x20, 0x31, 0x30, 0x2e, 0x4a, 0x05, 0x22, 0x38, 0x2e, 0x38, 0x22, 0x52, 0x06, 0x72,
	0x61, 0x74, 0x69, 0x6e, 0x67, 0x22, 0x51, 0x0a, 0x0d, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x05, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x70, 0x62, 0x2e, 0x4d, 0x6f, 0x76, 0x69, 0x65,
	0x42, 0x1f, 0x92, 0x41, 0x1c, 0x32, 0x1a, 0x54, 0x68, 0x65, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x20, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x20, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x2e, 0x52, 0x05, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x22, 0xb6, 0x03, 0x0a, 0x05, 0x4d, 0x6f, 0x76,
	0x69, 0x65, 0x12, 0x6b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x5b,
	0x92, 0x41, 0x58, 0x2a, 0x08, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x20, 0x49, 0x44, 0x32, 0x24, 0x54,
	0x68, 0x65, 0x20, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x20, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6d, 0x6f, 0x76,
	0x69, 0x65, 0x2e, 0x4a, 0x26, 0x22, 0x31, 0x32, 0x33, 0x65, 0x34, 0x35, 0x36, 0x37, 0x2d, 0x65,
	0x38, 0x39, 0x62, 0x2d, 0x31, 0x32, 0x64, 0x33, 0x2d, 0x61, 0x34, 0x35, 0x36, 0x2d, 0x34, 0x32,
	0x36, 0x36, 0x31, 0x34, 0x31, 0x37, 0x34, 0x30, 0x30, 0x30, 0x22, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x4c, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x38, 0x92,
	0x41, 0x35, 0x2a, 0x0a, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x20, 0x4e, 0x61, 0x6d, 0x65, 0x32, 0x17,
	0x54, 0x68, 0x65, 0x20, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x2e, 0x4a, 0x0e, 0x22, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x73,
	0x74, 0x65, 0x6c, 0x6c, 0x61, 0x72, 0x22, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x9c, 0x01,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x7a, 0x92, 0x41, 0x77, 0x2a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x32, 0x1d, 0x41, 0x20, 0x62, 0x72, 0x69, 0x65, 0x66, 0x20, 0x73,
	0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6d, 0x6f,
	0x76, 0x69, 0x65, 0x2e, 0x4a, 0x49, 0x22, 0x41, 0x20, 0x74, 0x65, 0x61, 0x6d, 0x20, 0x6f, 0x66,
	0x20, 0x61, 0x73, 0x74, 0x72, 0x6f, 0x6e, 0x61, 0x75, 0x74, 0x73, 0x20, 0x74, 0x72, 0x61, 0x76,
	0x65, 0x6c, 0x20, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x20, 0x61, 0x20, 0x77, 0x6f, 0x72,
	0x6d, 0x68, 0x6f, 0x6c, 0x65, 0x20, 0x69, 0x6e, 0x20, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x20,
	0x6f, 0x66, 0x20, 0x61, 0x20, 0x6e, 0x65, 0x77, 0x20, 0x68, 0x6f, 0x6d, 0x65, 0x2e, 0x22, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x53, 0x0a, 0x06,
	0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x42, 0x3b, 0x92, 0x41,
	0x38, 0x2a, 0x06, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x32, 0x27, 0x54, 0x68, 0x65, 0x20, 0x6d,
	0x6f, 0x76, 0x69, 0x65, 0x20, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x6f, 0x6e, 0x20, 0x61,
	0x20, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x31, 0x20, 0x74, 0x6f, 0x20, 0x31,
	0x30, 0x2e, 0x4a, 0x05, 0x22, 0x39, 0x2e, 0x30, 0x22, 0x52, 0x06, 0x72, 0x61, 0x74, 0x69, 0x6e,
	0x67, 0x22, 0x15, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x4d, 0x6f, 0x76, 0x69, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x55, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x41,
	0x6c, 0x6c, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x3d, 0x0a, 0x06, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x09, 0x2e, 0x70, 0x62, 0x2e, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x42, 0x1a, 0x92, 0x41, 0x17,
	0x32, 0x15, 0x41, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x6c, 0x6c, 0x20,
	0x6d, 0x6f, 0x76, 0x69, 0x65, 0x73, 0x2e, 0x52, 0x06, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x73, 0x32,
	0xe3, 0x07, 0x0a, 0x0c, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x82, 0x04, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x76, 0x69, 0x65,
	0x12, 0x10, 0x2e, 0x70, 0x62, 0x2e, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x11, 0x2e, 0x70, 0x62, 0x2e, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xcd, 0x03, 0x92, 0x41, 0xb0, 0x03, 0x0a, 0x06, 0x4d, 0x6f,
	0x76, 0x69, 0x65, 0x73, 0x12, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x20, 0x61, 0x20, 0x6e,
	0x65, 0x77, 0x20, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x1a, 0x49, 0x41, 0x64, 0x64, 0x73, 0x20, 0x61,
	0x20, 0x6e, 0x65, 0x77, 0x20, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x61, 0x6e, 0x64,
	0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x20, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x20, 0x64, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x2e, 0x4a, 0xf7, 0x01, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0xef, 0x01, 0x0a, 0x1b,
	0x4d, 0x6f, 0x76, 0x69, 0x65, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x20, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x2e, 0x22, 0xcf, 0x01, 0x0a, 0x10,
	0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e,
	0x12, 0xba, 0x01, 0x7b, 0x22, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x22, 0x3a, 0x20, 0x7b, 0x22, 0x69,
	0x64, 0x22, 0x3a, 0x20, 0x22, 0x31, 0x32, 0x33, 0x65, 0x34, 0x35, 0x36, 0x37, 0x2d, 0x65, 0x38,
	0x39, 0x62, 0x2d, 0x31, 0x32, 0x64, 0x33, 0x2d, 0x61, 0x34, 0x35, 0x36, 0x2d, 0x34, 0x32, 0x36,
	0x36, 0x31, 0x34, 0x31, 0x37, 0x34, 0x30, 0x30, 0x30, 0x22, 0x2c, 0x20, 0x22, 0x6e, 0x61, 0x6d,
	0x65, 0x22, 0x3a, 0x20, 0x22, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x74, 0x65, 0x6c, 0x6c, 0x61,
	0x72, 0x22, 0x2c, 0x20, 0x22, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x3a, 0x20, 0x22, 0x41, 0x20, 0x74, 0x65, 0x61, 0x6d, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x73,
	0x74, 0x72, 0x6f, 0x6e, 0x61, 0x75, 0x74, 0x73, 0x20, 0x74, 0x72, 0x61, 0x76, 0x65, 0x6c, 0x20,
	0x74, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x20, 0x61, 0x20, 0x77, 0x6f, 0x72, 0x6d, 0x68, 0x6f,
	0x6c, 0x65, 0x20, 0x69, 0x6e, 0x20, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x20, 0x6f, 0x66, 0x20,
	0x61, 0x20, 0x6e, 0x65, 0x77, 0x20, 0x68, 0x6f, 0x6d, 0x65, 0x2e, 0x22, 0x2c, 0x20, 0x22, 0x72,
	0x61, 0x74, 0x69, 0x6e, 0x67, 0x22, 0x3a, 0x20, 0x39, 0x2e, 0x30, 0x7d, 0x7d, 0x4a, 0x4d, 0x0a,
	0x03, 0x34, 0x30, 0x31, 0x12, 0x46, 0x0a, 0x15, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x20,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x62, 0x6f, 0x64, 0x79, 0x2e, 0x22, 0x2d, 0x0a,
	0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f,
	0x6e, 0x12, 0x19, 0x7b, 0x22, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x3a, 0x20, 0x22, 0x55, 0x6e,
	0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x22, 0x7d, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x13, 0x3a, 0x01, 0x2a, 0x22, 0x0e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6d,
	0x6f, 0x76, 0x69, 0x65, 0x73, 0x12, 0xcd, 0x03, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c,
	0x4d, 0x6f, 0x76, 0x69, 0x65, 0x73, 0x12, 0x17, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x41,
	0x6c, 0x6c, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x18, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x4d, 0x6f, 0x76, 0x69, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x89, 0x03, 0x92, 0x41, 0xef, 0x02,
	0x0a, 0x06, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x73, 0x12, 0x0e, 0x47, 0x65, 0x74, 0x20, 0x61, 0x6c,
	0x6c, 0x20, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x73, 0x1a, 0x31, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65,
	0x76, 0x65, 0x73, 0x20, 0x61, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x6c,
	0x6c, 0x20, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x73, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4a, 0xd3, 0x01, 0x0a, 0x03,
	0x32, 0x30, 0x30, 0x12, 0xcb, 0x01, 0x0a, 0x11, 0x41, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x6f,
	0x66, 0x20, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x73, 0x2e, 0x22, 0xb5, 0x01, 0x0a, 0x10, 0x61, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x12, 0xa0,
	0x01, 0x7b, 0x22, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x73, 0x22, 0x3a, 0x20, 0x5b, 0x7b, 0x22, 0x69,
	0x64, 0x22, 0x3a, 0x20, 0x22, 0x31, 0x32, 0x33, 0x65, 0x34, 0x35, 0x36, 0x37, 0x2d, 0x65, 0x38,
	0x39, 0x62, 0x2d, 0x31, 0x32, 0x64, 0x33, 0x2d, 0x61, 0x34, 0x35, 0x36, 0x2d, 0x34, 0x32, 0x36,
	0x36, 0x31, 0x34, 0x31, 0x37, 0x34, 0x30, 0x30, 0x30, 0x22, 0x2c, 0x20, 0x22, 0x6e, 0x61, 0x6d,
	0x65, 0x22, 0x3a, 0x20, 0x22, 0x49, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x2c,
	0x20, 0x22, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x3a, 0x20,
	0x22, 0x41, 0x20, 0x6d, 0x69, 0x6e, 0x64, 0x2d, 0x62, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x20,
	0x74, 0x68, 0x72, 0x69, 0x6c, 0x6c, 0x65, 0x72, 0x20, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x20, 0x64,
	0x72, 0x65, 0x61, 0x6d, 0x20, 0x69, 0x6e, 0x76, 0x61, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x22, 0x2c,
	0x20, 0x22, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x22, 0x3a, 0x20, 0x38, 0x2e, 0x38, 0x7d, 0x5d,
	0x7d, 0x4a, 0x4c, 0x0a, 0x03, 0x34, 0x30, 0x34, 0x12, 0x45, 0x0a, 0x10, 0x4e, 0x6f, 0x20, 0x6d,
	0x6f, 0x76, 0x69, 0x65, 0x73, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x2e, 0x22, 0x31, 0x0a, 0x10,
	0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e,
	0x12, 0x1d, 0x7b, 0x22, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x3a, 0x20, 0x22, 0x4e, 0x6f, 0x20,
	0x6d, 0x6f, 0x76, 0x69, 0x65, 0x73, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x2e, 0x22, 0x7d, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x10, 0x12, 0x0e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6d,
	0x6f, 0x76, 0x69, 0x65, 0x73, 0x42, 0x06, 0x5a, 0x04, 0x2e, 0x3b, 0x70, 0x62, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_movie_proto_rawDescOnce sync.Once
	file_movie_proto_rawDescData []byte
)

func file_movie_proto_rawDescGZIP() []byte {
	file_movie_proto_rawDescOnce.Do(func() {
		file_movie_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_movie_proto_rawDesc), len(file_movie_proto_rawDesc)))
	})
	return file_movie_proto_rawDescData
}

var file_movie_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_movie_proto_goTypes = []any{
	(*MovieRequest)(nil),         // 0: pb.MovieRequest
	(*MovieResponse)(nil),        // 1: pb.MovieResponse
	(*Movie)(nil),                // 2: pb.Movie
	(*GetAllMoviesRequest)(nil),  // 3: pb.GetAllMoviesRequest
	(*GetAllMoviesResponse)(nil), // 4: pb.GetAllMoviesResponse
}
var file_movie_proto_depIdxs = []int32{
	2, // 0: pb.MovieResponse.movie:type_name -> pb.Movie
	2, // 1: pb.GetAllMoviesResponse.movies:type_name -> pb.Movie
	0, // 2: pb.MovieService.CreateMovie:input_type -> pb.MovieRequest
	3, // 3: pb.MovieService.GetAllMovies:input_type -> pb.GetAllMoviesRequest
	1, // 4: pb.MovieService.CreateMovie:output_type -> pb.MovieResponse
	4, // 5: pb.MovieService.GetAllMovies:output_type -> pb.GetAllMoviesResponse
	4, // [4:6] is the sub-list for method output_type
	2, // [2:4] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_movie_proto_init() }
func file_movie_proto_init() {
	if File_movie_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_movie_proto_rawDesc), len(file_movie_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_movie_proto_goTypes,
		DependencyIndexes: file_movie_proto_depIdxs,
		MessageInfos:      file_movie_proto_msgTypes,
	}.Build()
	File_movie_proto = out.File
	file_movie_proto_goTypes = nil
	file_movie_proto_depIdxs = nil
}
